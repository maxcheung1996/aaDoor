{sampleFormData.fields.map((fields, i) => {
              let fieldName = fields.fieldName;
              if (fields.alias == "TEXT") {
                if (fields.fieldName == "審查員") {
                  fields.value = props.match.params.selectedUsers.replace(
                    "staff=staff=",
                    ""
                  );
                }

                let fieldTypes: TextFieldTypes;
                switch (fields.type) {
                  case "text":
                    fieldTypes = "text";
                    break;
                  case "number":
                    fieldTypes = "number";
                    break;
                  case "email":
                    fieldTypes = "email";
                    break;
                  case "password":
                    fieldTypes = "password";
                    break;
                  case "date":
                    fieldTypes = "date";
                    break;
                  case "time":
                    fieldTypes = "time";
                    break;
                }

                return (
                  <IonItem key={i}>
                    <IonGrid>
                      <IonLabel className="input-label" position="stacked">
                        {fields.fieldName}
                      </IonLabel>
                      <Controller
                        name={fields.fieldName}
                        control={control}
                        defaultValue={fields.defaultValues}
                        rules={{
                          required: fields.required,
                          pattern: fields.pattern,
                        }}
                        render={({ field }) => (
                          <IonInput
                            className="text-input"
                            type={fieldTypes}
                            value={fields.value}
                            onIonChange={(e) =>
                              setValue(fields.fieldName, e.detail.value!)
                            }
                            readonly={fields.readOnly}
                            placeholder={fields.placeHolder}
                            disabled={fields.disabled}
                            clearInput={fields.clearInput}
                          />
                        )}
                      />
                      <IonLabel
                        className="input-description"
                        color="medium"
                        position="stacked"
                      >
                        {fields.description}
                      </IonLabel>
                      <IonLabel color="danger">
                        {errors.TextField && "Required to fill in! "}
                      </IonLabel>
                    </IonGrid>
                  </IonItem>
                );
              } else if (fields.alias == "SELECT") {
                return (
                  <IonItem key={i}>
                    <IonGrid>
                      <IonLabel className="input-label" position="stacked">
                        {fields.fieldName}
                      </IonLabel>
                      <Controller
                        name={fields.fieldName}
                        control={control}
                        defaultValue={fields.defaultValues}
                        rules={{
                          required: fields.required,
                          pattern: fields.pattern,
                        }}
                        render={({ field }) => (
                          <IonSelect
                            placeholder={fields.placeHolder}
                            value={field.value}
                            onIonChange={(e) =>
                              setValue(fields.fieldName, e.detail.value)
                            }
                          >
                            {fields.option.map((options, i) => {
                              return (
                                <IonSelectOption value={options}>
                                  {options}
                                </IonSelectOption>
                              );
                            })}
                          </IonSelect>
                        )}
                      />
                      <IonLabel
                        className="input-description"
                        color="medium"
                        position="stacked"
                      >
                        {fields.description}
                      </IonLabel>
                      <IonLabel color="danger">
                        {errors.TextField && "Required to fill in! "}
                      </IonLabel>
                    </IonGrid>
                  </IonItem>
                );
              } else if (fields.alias == "CHECKBOX") {
                return (
                  <IonItem key={i}>
                    <IonGrid>
                      <IonLabel className="input-label" position="stacked">
                        {fields.fieldName}
                      </IonLabel>
                      <Controller
                        name={fields.fieldName}
                        control={control}
                        defaultValue={fields.defaultValues}
                        rules={{
                          required: fields.required,
                          pattern: fields.pattern,
                        }}
                        render={({ field }) => (
                          <IonGrid>
                            <IonRow>
                              <IonCol>
                                <IonCheckbox
                                  checked={field.value}
                                  onIonChange={(e) => {
                                    setValue(
                                      fields.fieldName,
                                      e.detail.checked
                                    );
                                  }}
                                />
                              </IonCol>
                              <IonCol>
                                <IonButton
                                  id={"trigger-button-" + i.toString()}
                                >
                                  跟進
                                </IonButton>
                                <IonModal
                                  isOpen={open}
                                  breakpoints={[0.1, 0.5, 1]}
                                  initialBreakpoint={0.5}
                                  backdropBreakpoint={0.2}
                                  onDidDismiss={closeModal}
                                  trigger={"trigger-button-" + i.toString()}
                                >
                                  <SubFormModel
                                    data={"Sub Form No." + i.toString()}
                                  />
                                </IonModal>
                              </IonCol>
                            </IonRow>
                          </IonGrid>
                        )}
                      />
                      <IonLabel className="input-label" position="stacked">
                        備註
                      </IonLabel>
                      <Controller
                        name={`desc_${i}`}
                        control={control}
                        defaultValue=""
                        rules={{
                          required: false,
                          pattern: fields.pattern,
                        }}
                        render={({ field }) => (
                          <IonInput
                            className="text-input"
                            type="text"
                            value={fields.value}
                            onIonChange={(e) =>
                              setValue(`desc_${i}`, e.detail.value!)
                            }
                            readonly={false}
                            placeholder=""
                            disabled={false}
                            clearInput={true}
                          />
                        )}
                      />
                      {/* <IonLabel
                        className="input-description"
                        color="medium"
                        position="stacked"
                      >
                        {fields.description}
                      </IonLabel> */}
                      <IonLabel color="danger">
                        {errors.TextField && "Required to fill in! "}
                      </IonLabel>
                    </IonGrid>
                  </IonItem>
                );
              } else if (fields.alias == "RADIOGROUP") {
                return (
                  <IonItem key={i}>
                    <IonGrid>
                      <IonLabel className="input-label" position="stacked">
                        {fields.fieldName}
                      </IonLabel>
                      <Controller
                        name={fields.fieldName}
                        control={control}
                        defaultValue={fields.defaultValues}
                        rules={{
                          required: fields.required,
                          pattern: fields.pattern,
                        }}
                        render={({ field }) => (
                          <IonRadioGroup
                            onIonChange={(e) =>
                              setValue(fields.fieldName, e.detail.value)
                            }
                          >
                            {fields.option.map((options, i) => {
                              return (
                                <IonItem>
                                  <IonLabel>{options}</IonLabel>
                                  <IonRadio value={options} />
                                </IonItem>
                              );
                            })}
                          </IonRadioGroup>
                        )}
                      />
                      <IonLabel
                        className="input-description"
                        color="medium"
                        position="stacked"
                      >
                        {fields.description}
                      </IonLabel>
                      <IonLabel color="danger">
                        {errors.TextField && "Required to fill in! "}
                      </IonLabel>
                    </IonGrid>
                  </IonItem>
                );
              }
            })}